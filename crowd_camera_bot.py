import telebot
import requests
import threading
from crowd_checker import CrowdChecker
from strings import bus_timetable_message, bus_stops_message, medical_message
from utils import subscribe_chat_id, unsubscribe_chat_id
from utils import get_bus_markup, get_default_markup

TOKEN = "TOKEN"
CROWD_THRESHOLD = 10
bot = telebot.TeleBot(TOKEN)
crowdChecker = CrowdChecker()
crowdChecker.start()

current_context = {'subscribed_chats': set()}

def callback_minute():
    for chat_id in current_context['subscribed_chats']:
        amount = crowdChecker.howManyPeopleNow()
        if amount > CROWD_THRESHOLD:
            bot.send_message(chat_id=chat_id,
            text='–í–ù–ò–ú–ê–ù–ò–ï: –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–Ω–æ–≥–æ –ª—é–¥–µ–π. \
–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{}*\n\
–°–æ–≤–µ—Ç—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞\n\
_–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\
–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"_'.format(amount),
            parse_mode='MARKDOWN')
            unsubscribe_chat_id(chat_id)
    threading.Timer(60, callback_minute).start()

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        current_chat_id = call.message.chat.id

        if call.data == "people_count":
            send_text = "–õ—é–¥–µ–π –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ–π—á–∞—Å: *{}*".format(crowdChecker.howManyPeopleNow())

        if call.data == "subscribe":
            send_text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!"
            subscribe_chat_id(current_context, current_chat_id)

        if call.data == "unsubscribe":
            send_text = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!"
            unsubscribe_chat_id(current_context, current_chat_id)

        if call.data == 'timetable':
            send_text = bus_timetable_message()

        if call.data == 'bus_stops':
            send_text = bus_stops_message()

        if call.data == 'where_is_bus':
            send_text = '_–°–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ._'

        if call.data == 'no_space':
            send_text = '_–í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç._'

        if call.data in ['people_count', 'subscribe', 'unsubscribe',
                         'timetable', 'bus_stops', 'where_is_bus',
                         'no_space']:
            s = requests.Session()
            s.get('https://api.telegram.org/bot{0}/deletemessage?message_id={1}&chat_id={2}'.format( \
            TOKEN, call.message.message_id, current_chat_id))
            bot.send_message(chat_id=current_chat_id,
                text=send_text, parse_mode='MARKDOWN',
                reply_markup=get_bus_markup(current_context, current_chat_id))


@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    bot.send_message(chat_id=message.chat.id,
                    text='–ü—Ä–∏–≤–µ—Ç, {}!\n\
–Ø –∫–ª–æ–Ω –±–æ—Ç–∞-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –æ –≥–æ—Ä–æ–¥–µ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å!üòâ \n\n–ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à–µ–ª \
–Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–æ –º–æ–∂–µ—à—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ö–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å:\n\
‚òéÔ∏è: 8-800-222-22-87\n\
üì©: helpme@innopolis.ru\n\
telegram: @InnopolisHelp!'.format(message.from_user.first_name),
                    parse_mode='MARKDOWN', reply_markup=get_default_markup())

@bot.message_handler(func=lambda x: x not in ['/start', '/help'])
def handle_all(message):
    current_chat_id = message.chat.id
    markup = get_default_markup()
    if message.text == 'üöå':
        text = "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤ (‚åõÔ∏è) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º (üèÅ)"
        markup = get_bus_markup(current_context, current_chat_id)
    elif message.text == 'üöë':
        text = medical_message()
    elif message.text == 'üè†':
        text = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ"
    elif message.text == 'üë§':
        text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞: @lemhell, @vladvin.\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Arch City Hack"
    else:
        text = "–ù–µ –æ—á–µ–Ω—å –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å"
    bot.send_message(chat_id=current_chat_id,
                    text=text, reply_markup=markup, parse_mode='MARKDOWN')


callback_minute()
bot.polling(none_stop=False, interval=0, timeout=40)

crowdChecker.join()
